// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package apimocks

import (
	"context"

	"github.com/a-novel/service-authentication/internal/services"
	"github.com/a-novel/service-authentication/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmailExistsService creates a new instance of MockEmailExistsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailExistsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailExistsService {
	mock := &MockEmailExistsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailExistsService is an autogenerated mock type for the EmailExistsService type
type MockEmailExistsService struct {
	mock.Mock
}

type MockEmailExistsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailExistsService) EXPECT() *MockEmailExistsService_Expecter {
	return &MockEmailExistsService_Expecter{mock: &_m.Mock}
}

// EmailExists provides a mock function for the type MockEmailExistsService
func (_mock *MockEmailExistsService) EmailExists(ctx context.Context, request services.EmailExistsRequest) (bool, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.EmailExistsRequest) (bool, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.EmailExistsRequest) bool); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.EmailExistsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEmailExistsService_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type MockEmailExistsService_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockEmailExistsService_Expecter) EmailExists(ctx interface{}, request interface{}) *MockEmailExistsService_EmailExists_Call {
	return &MockEmailExistsService_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, request)}
}

func (_c *MockEmailExistsService_EmailExists_Call) Run(run func(ctx context.Context, request services.EmailExistsRequest)) *MockEmailExistsService_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.EmailExistsRequest))
	})
	return _c
}

func (_c *MockEmailExistsService_EmailExists_Call) Return(b bool, err error) *MockEmailExistsService_EmailExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockEmailExistsService_EmailExists_Call) RunAndReturn(run func(ctx context.Context, request services.EmailExistsRequest) (bool, error)) *MockEmailExistsService_EmailExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateEmailService creates a new instance of MockUpdateEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateEmailService {
	mock := &MockUpdateEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdateEmailService is an autogenerated mock type for the UpdateEmailService type
type MockUpdateEmailService struct {
	mock.Mock
}

type MockUpdateEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateEmailService) EXPECT() *MockUpdateEmailService_Expecter {
	return &MockUpdateEmailService_Expecter{mock: &_m.Mock}
}

// UpdateEmail provides a mock function for the type MockUpdateEmailService
func (_mock *MockUpdateEmailService) UpdateEmail(ctx context.Context, request services.UpdateEmailRequest) (*services.UpdateEmailResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 *services.UpdateEmailResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.UpdateEmailRequest) (*services.UpdateEmailResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.UpdateEmailRequest) *services.UpdateEmailResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UpdateEmailResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.UpdateEmailRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateEmailService_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type MockUpdateEmailService_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockUpdateEmailService_Expecter) UpdateEmail(ctx interface{}, request interface{}) *MockUpdateEmailService_UpdateEmail_Call {
	return &MockUpdateEmailService_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, request)}
}

func (_c *MockUpdateEmailService_UpdateEmail_Call) Run(run func(ctx context.Context, request services.UpdateEmailRequest)) *MockUpdateEmailService_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.UpdateEmailRequest))
	})
	return _c
}

func (_c *MockUpdateEmailService_UpdateEmail_Call) Return(updateEmailResponse *services.UpdateEmailResponse, err error) *MockUpdateEmailService_UpdateEmail_Call {
	_c.Call.Return(updateEmailResponse, err)
	return _c
}

func (_c *MockUpdateEmailService_UpdateEmail_Call) RunAndReturn(run func(ctx context.Context, request services.UpdateEmailRequest) (*services.UpdateEmailResponse, error)) *MockUpdateEmailService_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdatePasswordService creates a new instance of MockUpdatePasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdatePasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdatePasswordService {
	mock := &MockUpdatePasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdatePasswordService is an autogenerated mock type for the UpdatePasswordService type
type MockUpdatePasswordService struct {
	mock.Mock
}

type MockUpdatePasswordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdatePasswordService) EXPECT() *MockUpdatePasswordService_Expecter {
	return &MockUpdatePasswordService_Expecter{mock: &_m.Mock}
}

// UpdatePassword provides a mock function for the type MockUpdatePasswordService
func (_mock *MockUpdatePasswordService) UpdatePassword(ctx context.Context, request services.UpdatePasswordRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.UpdatePasswordRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUpdatePasswordService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockUpdatePasswordService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockUpdatePasswordService_Expecter) UpdatePassword(ctx interface{}, request interface{}) *MockUpdatePasswordService_UpdatePassword_Call {
	return &MockUpdatePasswordService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, request)}
}

func (_c *MockUpdatePasswordService_UpdatePassword_Call) Run(run func(ctx context.Context, request services.UpdatePasswordRequest)) *MockUpdatePasswordService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.UpdatePasswordRequest))
	})
	return _c
}

func (_c *MockUpdatePasswordService_UpdatePassword_Call) Return(err error) *MockUpdatePasswordService_UpdatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUpdatePasswordService_UpdatePassword_Call) RunAndReturn(run func(ctx context.Context, request services.UpdatePasswordRequest) error) *MockUpdatePasswordService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterService creates a new instance of MockRegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterService {
	mock := &MockRegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegisterService is an autogenerated mock type for the RegisterService type
type MockRegisterService struct {
	mock.Mock
}

type MockRegisterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterService) EXPECT() *MockRegisterService_Expecter {
	return &MockRegisterService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function for the type MockRegisterService
func (_mock *MockRegisterService) Register(ctx context.Context, request services.RegisterRequest) (*models.Token, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RegisterRequest) (*models.Token, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RegisterRequest) *models.Token); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.RegisterRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRegisterService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockRegisterService_Expecter) Register(ctx interface{}, request interface{}) *MockRegisterService_Register_Call {
	return &MockRegisterService_Register_Call{Call: _e.mock.On("Register", ctx, request)}
}

func (_c *MockRegisterService_Register_Call) Run(run func(ctx context.Context, request services.RegisterRequest)) *MockRegisterService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.RegisterRequest))
	})
	return _c
}

func (_c *MockRegisterService_Register_Call) Return(token *models.Token, err error) *MockRegisterService_Register_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockRegisterService_Register_Call) RunAndReturn(run func(ctx context.Context, request services.RegisterRequest) (*models.Token, error)) *MockRegisterService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateRoleService creates a new instance of MockUpdateRoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateRoleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateRoleService {
	mock := &MockUpdateRoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdateRoleService is an autogenerated mock type for the UpdateRoleService type
type MockUpdateRoleService struct {
	mock.Mock
}

type MockUpdateRoleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateRoleService) EXPECT() *MockUpdateRoleService_Expecter {
	return &MockUpdateRoleService_Expecter{mock: &_m.Mock}
}

// UpdateRole provides a mock function for the type MockUpdateRoleService
func (_mock *MockUpdateRoleService) UpdateRole(ctx context.Context, request services.UpdateRoleRequest) (*models.User, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.UpdateRoleRequest) (*models.User, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.UpdateRoleRequest) *models.User); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.UpdateRoleRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateRoleService_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockUpdateRoleService_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockUpdateRoleService_Expecter) UpdateRole(ctx interface{}, request interface{}) *MockUpdateRoleService_UpdateRole_Call {
	return &MockUpdateRoleService_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, request)}
}

func (_c *MockUpdateRoleService_UpdateRole_Call) Run(run func(ctx context.Context, request services.UpdateRoleRequest)) *MockUpdateRoleService_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.UpdateRoleRequest))
	})
	return _c
}

func (_c *MockUpdateRoleService_UpdateRole_Call) Return(user *models.User, err error) *MockUpdateRoleService_UpdateRole_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUpdateRoleService_UpdateRole_Call) RunAndReturn(run func(ctx context.Context, request services.UpdateRoleRequest) (*models.User, error)) *MockUpdateRoleService_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginService creates a new instance of MockLoginService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginService {
	mock := &MockLoginService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginService is an autogenerated mock type for the LoginService type
type MockLoginService struct {
	mock.Mock
}

type MockLoginService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginService) EXPECT() *MockLoginService_Expecter {
	return &MockLoginService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockLoginService
func (_mock *MockLoginService) Login(ctx context.Context, request services.LoginRequest) (*models.Token, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.LoginRequest) (*models.Token, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.LoginRequest) *models.Token); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.LoginRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockLoginService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockLoginService_Expecter) Login(ctx interface{}, request interface{}) *MockLoginService_Login_Call {
	return &MockLoginService_Login_Call{Call: _e.mock.On("Login", ctx, request)}
}

func (_c *MockLoginService_Login_Call) Run(run func(ctx context.Context, request services.LoginRequest)) *MockLoginService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.LoginRequest))
	})
	return _c
}

func (_c *MockLoginService_Login_Call) Return(token *models.Token, err error) *MockLoginService_Login_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockLoginService_Login_Call) RunAndReturn(run func(ctx context.Context, request services.LoginRequest) (*models.Token, error)) *MockLoginService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginAnonService creates a new instance of MockLoginAnonService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginAnonService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginAnonService {
	mock := &MockLoginAnonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginAnonService is an autogenerated mock type for the LoginAnonService type
type MockLoginAnonService struct {
	mock.Mock
}

type MockLoginAnonService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginAnonService) EXPECT() *MockLoginAnonService_Expecter {
	return &MockLoginAnonService_Expecter{mock: &_m.Mock}
}

// LoginAnon provides a mock function for the type MockLoginAnonService
func (_mock *MockLoginAnonService) LoginAnon(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoginAnon")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginAnonService_LoginAnon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginAnon'
type MockLoginAnonService_LoginAnon_Call struct {
	*mock.Call
}

// LoginAnon is a helper method to define mock.On call
//   - ctx
func (_e *MockLoginAnonService_Expecter) LoginAnon(ctx interface{}) *MockLoginAnonService_LoginAnon_Call {
	return &MockLoginAnonService_LoginAnon_Call{Call: _e.mock.On("LoginAnon", ctx)}
}

func (_c *MockLoginAnonService_LoginAnon_Call) Run(run func(ctx context.Context)) *MockLoginAnonService_LoginAnon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoginAnonService_LoginAnon_Call) Return(s string, err error) *MockLoginAnonService_LoginAnon_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLoginAnonService_LoginAnon_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockLoginAnonService_LoginAnon_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumeRefreshTokenService creates a new instance of MockConsumeRefreshTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumeRefreshTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumeRefreshTokenService {
	mock := &MockConsumeRefreshTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumeRefreshTokenService is an autogenerated mock type for the ConsumeRefreshTokenService type
type MockConsumeRefreshTokenService struct {
	mock.Mock
}

type MockConsumeRefreshTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumeRefreshTokenService) EXPECT() *MockConsumeRefreshTokenService_Expecter {
	return &MockConsumeRefreshTokenService_Expecter{mock: &_m.Mock}
}

// ConsumeRefreshToken provides a mock function for the type MockConsumeRefreshTokenService
func (_mock *MockConsumeRefreshTokenService) ConsumeRefreshToken(ctx context.Context, request services.ConsumeRefreshTokenRequest) (string, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeRefreshToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeRefreshTokenRequest) (string, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeRefreshTokenRequest) string); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ConsumeRefreshTokenRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeRefreshTokenService_ConsumeRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeRefreshToken'
type MockConsumeRefreshTokenService_ConsumeRefreshToken_Call struct {
	*mock.Call
}

// ConsumeRefreshToken is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockConsumeRefreshTokenService_Expecter) ConsumeRefreshToken(ctx interface{}, request interface{}) *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call {
	return &MockConsumeRefreshTokenService_ConsumeRefreshToken_Call{Call: _e.mock.On("ConsumeRefreshToken", ctx, request)}
}

func (_c *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call) Run(run func(ctx context.Context, request services.ConsumeRefreshTokenRequest)) *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.ConsumeRefreshTokenRequest))
	})
	return _c
}

func (_c *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call) Return(s string, err error) *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call) RunAndReturn(run func(ctx context.Context, request services.ConsumeRefreshTokenRequest) (string, error)) *MockConsumeRefreshTokenService_ConsumeRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestEmailUpdateService creates a new instance of MockRequestEmailUpdateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestEmailUpdateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestEmailUpdateService {
	mock := &MockRequestEmailUpdateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestEmailUpdateService is an autogenerated mock type for the RequestEmailUpdateService type
type MockRequestEmailUpdateService struct {
	mock.Mock
}

type MockRequestEmailUpdateService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestEmailUpdateService) EXPECT() *MockRequestEmailUpdateService_Expecter {
	return &MockRequestEmailUpdateService_Expecter{mock: &_m.Mock}
}

// RequestEmailUpdate provides a mock function for the type MockRequestEmailUpdateService
func (_mock *MockRequestEmailUpdateService) RequestEmailUpdate(ctx context.Context, request services.RequestEmailUpdateRequest) (*models.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RequestEmailUpdate")
	}

	var r0 *models.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RequestEmailUpdateRequest) (*models.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RequestEmailUpdateRequest) *models.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.RequestEmailUpdateRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestEmailUpdateService_RequestEmailUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestEmailUpdate'
type MockRequestEmailUpdateService_RequestEmailUpdate_Call struct {
	*mock.Call
}

// RequestEmailUpdate is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockRequestEmailUpdateService_Expecter) RequestEmailUpdate(ctx interface{}, request interface{}) *MockRequestEmailUpdateService_RequestEmailUpdate_Call {
	return &MockRequestEmailUpdateService_RequestEmailUpdate_Call{Call: _e.mock.On("RequestEmailUpdate", ctx, request)}
}

func (_c *MockRequestEmailUpdateService_RequestEmailUpdate_Call) Run(run func(ctx context.Context, request services.RequestEmailUpdateRequest)) *MockRequestEmailUpdateService_RequestEmailUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.RequestEmailUpdateRequest))
	})
	return _c
}

func (_c *MockRequestEmailUpdateService_RequestEmailUpdate_Call) Return(shortCode *models.ShortCode, err error) *MockRequestEmailUpdateService_RequestEmailUpdate_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRequestEmailUpdateService_RequestEmailUpdate_Call) RunAndReturn(run func(ctx context.Context, request services.RequestEmailUpdateRequest) (*models.ShortCode, error)) *MockRequestEmailUpdateService_RequestEmailUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestPasswordResetService creates a new instance of MockRequestPasswordResetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestPasswordResetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestPasswordResetService {
	mock := &MockRequestPasswordResetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestPasswordResetService is an autogenerated mock type for the RequestPasswordResetService type
type MockRequestPasswordResetService struct {
	mock.Mock
}

type MockRequestPasswordResetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestPasswordResetService) EXPECT() *MockRequestPasswordResetService_Expecter {
	return &MockRequestPasswordResetService_Expecter{mock: &_m.Mock}
}

// RequestPasswordReset provides a mock function for the type MockRequestPasswordResetService
func (_mock *MockRequestPasswordResetService) RequestPasswordReset(ctx context.Context, request services.RequestPasswordResetRequest) (*models.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RequestPasswordReset")
	}

	var r0 *models.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RequestPasswordResetRequest) (*models.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RequestPasswordResetRequest) *models.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.RequestPasswordResetRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestPasswordResetService_RequestPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPasswordReset'
type MockRequestPasswordResetService_RequestPasswordReset_Call struct {
	*mock.Call
}

// RequestPasswordReset is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockRequestPasswordResetService_Expecter) RequestPasswordReset(ctx interface{}, request interface{}) *MockRequestPasswordResetService_RequestPasswordReset_Call {
	return &MockRequestPasswordResetService_RequestPasswordReset_Call{Call: _e.mock.On("RequestPasswordReset", ctx, request)}
}

func (_c *MockRequestPasswordResetService_RequestPasswordReset_Call) Run(run func(ctx context.Context, request services.RequestPasswordResetRequest)) *MockRequestPasswordResetService_RequestPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.RequestPasswordResetRequest))
	})
	return _c
}

func (_c *MockRequestPasswordResetService_RequestPasswordReset_Call) Return(shortCode *models.ShortCode, err error) *MockRequestPasswordResetService_RequestPasswordReset_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRequestPasswordResetService_RequestPasswordReset_Call) RunAndReturn(run func(ctx context.Context, request services.RequestPasswordResetRequest) (*models.ShortCode, error)) *MockRequestPasswordResetService_RequestPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestRegisterService creates a new instance of MockRequestRegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestRegisterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestRegisterService {
	mock := &MockRequestRegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestRegisterService is an autogenerated mock type for the RequestRegisterService type
type MockRequestRegisterService struct {
	mock.Mock
}

type MockRequestRegisterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestRegisterService) EXPECT() *MockRequestRegisterService_Expecter {
	return &MockRequestRegisterService_Expecter{mock: &_m.Mock}
}

// RequestRegister provides a mock function for the type MockRequestRegisterService
func (_mock *MockRequestRegisterService) RequestRegister(ctx context.Context, request services.RequestRegisterRequest) (*models.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RequestRegister")
	}

	var r0 *models.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RequestRegisterRequest) (*models.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RequestRegisterRequest) *models.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.RequestRegisterRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestRegisterService_RequestRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRegister'
type MockRequestRegisterService_RequestRegister_Call struct {
	*mock.Call
}

// RequestRegister is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockRequestRegisterService_Expecter) RequestRegister(ctx interface{}, request interface{}) *MockRequestRegisterService_RequestRegister_Call {
	return &MockRequestRegisterService_RequestRegister_Call{Call: _e.mock.On("RequestRegister", ctx, request)}
}

func (_c *MockRequestRegisterService_RequestRegister_Call) Run(run func(ctx context.Context, request services.RequestRegisterRequest)) *MockRequestRegisterService_RequestRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.RequestRegisterRequest))
	})
	return _c
}

func (_c *MockRequestRegisterService_RequestRegister_Call) Return(shortCode *models.ShortCode, err error) *MockRequestRegisterService_RequestRegister_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRequestRegisterService_RequestRegister_Call) RunAndReturn(run func(ctx context.Context, request services.RequestRegisterRequest) (*models.ShortCode, error)) *MockRequestRegisterService_RequestRegister_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetUserService creates a new instance of MockGetUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetUserService {
	mock := &MockGetUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetUserService is an autogenerated mock type for the GetUserService type
type MockGetUserService struct {
	mock.Mock
}

type MockGetUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetUserService) EXPECT() *MockGetUserService_Expecter {
	return &MockGetUserService_Expecter{mock: &_m.Mock}
}

// SelectUser provides a mock function for the type MockGetUserService
func (_mock *MockGetUserService) SelectUser(ctx context.Context, request services.SelectUserRequest) (*models.User, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectUser")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectUserRequest) (*models.User, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectUserRequest) *models.User); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.SelectUserRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGetUserService_SelectUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectUser'
type MockGetUserService_SelectUser_Call struct {
	*mock.Call
}

// SelectUser is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockGetUserService_Expecter) SelectUser(ctx interface{}, request interface{}) *MockGetUserService_SelectUser_Call {
	return &MockGetUserService_SelectUser_Call{Call: _e.mock.On("SelectUser", ctx, request)}
}

func (_c *MockGetUserService_SelectUser_Call) Run(run func(ctx context.Context, request services.SelectUserRequest)) *MockGetUserService_SelectUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.SelectUserRequest))
	})
	return _c
}

func (_c *MockGetUserService_SelectUser_Call) Return(user *models.User, err error) *MockGetUserService_SelectUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockGetUserService_SelectUser_Call) RunAndReturn(run func(ctx context.Context, request services.SelectUserRequest) (*models.User, error)) *MockGetUserService_SelectUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListUsersService creates a new instance of MockListUsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListUsersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListUsersService {
	mock := &MockListUsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListUsersService is an autogenerated mock type for the ListUsersService type
type MockListUsersService struct {
	mock.Mock
}

type MockListUsersService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListUsersService) EXPECT() *MockListUsersService_Expecter {
	return &MockListUsersService_Expecter{mock: &_m.Mock}
}

// ListUsers provides a mock function for the type MockListUsersService
func (_mock *MockListUsersService) ListUsers(ctx context.Context, request services.ListUsersRequest) ([]*models.User, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ListUsersRequest) ([]*models.User, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ListUsersRequest) []*models.User); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ListUsersRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListUsersService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockListUsersService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockListUsersService_Expecter) ListUsers(ctx interface{}, request interface{}) *MockListUsersService_ListUsers_Call {
	return &MockListUsersService_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, request)}
}

func (_c *MockListUsersService_ListUsers_Call) Run(run func(ctx context.Context, request services.ListUsersRequest)) *MockListUsersService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.ListUsersRequest))
	})
	return _c
}

func (_c *MockListUsersService_ListUsers_Call) Return(users []*models.User, err error) *MockListUsersService_ListUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockListUsersService_ListUsers_Call) RunAndReturn(run func(ctx context.Context, request services.ListUsersRequest) ([]*models.User, error)) *MockListUsersService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}
