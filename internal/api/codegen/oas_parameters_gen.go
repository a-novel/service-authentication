// Code generated by ogen, DO NOT EDIT.

package codegen

import (
	"fmt"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EmailExistsParams is parameters of emailExists operation.
type EmailExistsParams struct {
	Email Email
}

func unpackEmailExistsParams(packed middleware.Parameters) (params EmailExistsParams) {
	{
		key := middleware.ParameterKey{
			Name: "email",
			In:   "query",
		}
		params.Email = packed[key].(Email)
	}
	return params
}

func decodeEmailExistsParams(args [0]string, argsEscaped bool, r *http.Request) (params EmailExistsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: email.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEmailVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEmailVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Email = Email(paramsDotEmailVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Email.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "email",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserParams is parameters of getUser operation.
type GetUserParams struct {
	// The unique identifier of the user.
	UserID UserID
}

func unpackGetUserParams(packed middleware.Parameters) (params GetUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "userID",
			In:   "query",
		}
		params.UserID = packed[key].(UserID)
	}
	return params
}

func decodeGetUserParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: userID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotUserIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserID = UserID(paramsDotUserIDVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userID",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListUsersParams is parameters of listUsers operation.
type ListUsersParams struct {
	// The maximum number of items to return.
	Limit OptInt
	// The number of items to skip before starting to collect the result set.
	Offset OptInt
	// The roles to filter the users by.
	Roles []CredentialsRole
}

func unpackListUsersParams(packed middleware.Parameters) (params ListUsersParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "roles",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Roles = v.([]CredentialsRole)
		}
	}
	return params
}

func decodeListUsersParams(args [0]string, argsEscaped bool, r *http.Request) (params ListUsersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(100)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           1000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: roles.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "roles",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotRolesVal CredentialsRole
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotRolesVal = CredentialsRole(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Roles = append(params.Roles, paramsDotRolesVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.Roles {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "roles",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RefreshSessionParams is parameters of refreshSession operation.
type RefreshSessionParams struct {
	RefreshToken string
	AccessToken  string
}

func unpackRefreshSessionParams(packed middleware.Parameters) (params RefreshSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "refreshToken",
			In:   "query",
		}
		params.RefreshToken = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "accessToken",
			In:   "query",
		}
		params.AccessToken = packed[key].(string)
	}
	return params
}

func decodeRefreshSessionParams(args [0]string, argsEscaped bool, r *http.Request) (params RefreshSessionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: refreshToken.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "refreshToken",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RefreshToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "refreshToken",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: accessToken.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "accessToken",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccessToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "accessToken",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
