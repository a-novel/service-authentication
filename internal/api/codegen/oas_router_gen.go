// Code generated by ogen, DO NOT EDIT.

package codegen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "credentials"

				if l := len("credentials"); len(elem) >= l && elem[0:l] == "credentials" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "PUT":
						s.handleRegisterRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "email"

						if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleEmailExistsRequest([0]string{}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateEmailRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PATCH")
							}

							return
						}

					case 'p': // Prefix: "password"

						if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "PATCH":
								s.handleUpdatePasswordRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/reset"

							if l := len("/reset"); len(elem) >= l && elem[0:l] == "/reset" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PATCH":
									s.handleResetPasswordRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PATCH")
								}

								return
							}

						}

					case 'r': // Prefix: "role"

						if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PATCH":
								s.handleUpdateRoleRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PATCH")
							}

							return
						}

					}

				}

			case 'h': // Prefix: "healthcheck"

				if l := len("healthcheck"); len(elem) >= l && elem[0:l] == "healthcheck" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHealthcheckRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'p': // Prefix: "ping"

				if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handlePingRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 's': // Prefix: "s"

				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ession"

					if l := len("ession"); len(elem) >= l && elem[0:l] == "ession" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleCheckSessionRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleCreateSessionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "anon"

							if l := len("anon"); len(elem) >= l && elem[0:l] == "anon" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleCreateAnonSessionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						case 'r': // Prefix: "refresh"

							if l := len("refresh"); len(elem) >= l && elem[0:l] == "refresh" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PATCH":
									s.handleRefreshSessionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PATCH")
								}

								return
							}

						}

					}

				case 'h': // Prefix: "hort-code/"

					if l := len("hort-code/"); len(elem) >= l && elem[0:l] == "hort-code/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "register"

						if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PUT":
								s.handleRequestRegistrationRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}

					case 'u': // Prefix: "update-"

						if l := len("update-"); len(elem) >= l && elem[0:l] == "update-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"

							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleRequestEmailUpdateRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						case 'p': // Prefix: "password"

							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleRequestPasswordResetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						}

					}

				}

			case 'u': // Prefix: "user"

				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleListUsersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "credentials"

				if l := len("credentials"); len(elem) >= l && elem[0:l] == "credentials" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "PUT":
						r.name = RegisterOperation
						r.summary = "Create a new user."
						r.operationID = "register"
						r.pathPattern = "/credentials"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "email"

						if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = EmailExistsOperation
								r.summary = "Check the availability of an email."
								r.operationID = "emailExists"
								r.pathPattern = "/credentials/email"
								r.args = args
								r.count = 0
								return r, true
							case "PATCH":
								r.name = UpdateEmailOperation
								r.summary = "Update the email of an user."
								r.operationID = "updateEmail"
								r.pathPattern = "/credentials/email"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'p': // Prefix: "password"

						if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "PATCH":
								r.name = UpdatePasswordOperation
								r.summary = "Update the password of an user."
								r.operationID = "updatePassword"
								r.pathPattern = "/credentials/password"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/reset"

							if l := len("/reset"); len(elem) >= l && elem[0:l] == "/reset" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PATCH":
									r.name = ResetPasswordOperation
									r.summary = "Reset the password of an user."
									r.operationID = "resetPassword"
									r.pathPattern = "/credentials/password/reset"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'r': // Prefix: "role"

						if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "PATCH":
								r.name = UpdateRoleOperation
								r.summary = "Update the role of an user."
								r.operationID = "updateRole"
								r.pathPattern = "/credentials/role"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'h': // Prefix: "healthcheck"

				if l := len("healthcheck"); len(elem) >= l && elem[0:l] == "healthcheck" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = HealthcheckOperation
						r.summary = "Check the health of the service."
						r.operationID = "healthcheck"
						r.pathPattern = "/healthcheck"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'p': // Prefix: "ping"

				if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = PingOperation
						r.summary = "Check the status of the service."
						r.operationID = "ping"
						r.pathPattern = "/ping"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "s"

				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ession"

					if l := len("ession"); len(elem) >= l && elem[0:l] == "ession" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = CheckSessionOperation
							r.summary = "Check the status of a session."
							r.operationID = "checkSession"
							r.pathPattern = "/session"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = CreateSessionOperation
							r.summary = "Create a new session."
							r.operationID = "createSession"
							r.pathPattern = "/session"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "anon"

							if l := len("anon"); len(elem) >= l && elem[0:l] == "anon" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = CreateAnonSessionOperation
									r.summary = "Create a new anonymous session."
									r.operationID = "createAnonSession"
									r.pathPattern = "/session/anon"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'r': // Prefix: "refresh"

							if l := len("refresh"); len(elem) >= l && elem[0:l] == "refresh" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PATCH":
									r.name = RefreshSessionOperation
									r.summary = "Refresh access token."
									r.operationID = "refreshSession"
									r.pathPattern = "/session/refresh"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'h': // Prefix: "hort-code/"

					if l := len("hort-code/"); len(elem) >= l && elem[0:l] == "hort-code/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "register"

						if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "PUT":
								r.name = RequestRegistrationOperation
								r.summary = "Set a new short code for user registration."
								r.operationID = "requestRegistration"
								r.pathPattern = "/short-code/register"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'u': // Prefix: "update-"

						if l := len("update-"); len(elem) >= l && elem[0:l] == "update-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"

							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = RequestEmailUpdateOperation
									r.summary = "Set a new short code for user email change."
									r.operationID = "requestEmailUpdate"
									r.pathPattern = "/short-code/update-email"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'p': // Prefix: "password"

							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = RequestPasswordResetOperation
									r.summary = "Set a new short code for user password change."
									r.operationID = "requestPasswordReset"
									r.pathPattern = "/short-code/update-password"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'u': // Prefix: "user"

				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetUserOperation
						r.summary = "Get a user."
						r.operationID = "getUser"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = ListUsersOperation
							r.summary = "List all users."
							r.operationID = "listUsers"
							r.pathPattern = "/users"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
