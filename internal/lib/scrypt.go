package lib

import (
	"crypto/rand"
	"crypto/subtle"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"math"
	"strings"

	"golang.org/x/crypto/argon2"
)

var (
	ErrInvalidHash         = errors.New("the encoded hash is in an invalid format")
	ErrIncompatibleVersion = errors.New("the encoded hash is using an incompatible version of Argon2")
	ErrInvalidPassword     = errors.New("the password is invalid")

	ErrGenerateScrypt = errors.New("GenerateScrypt")
	ErrCompareScrypt  = errors.New("CompareScrypt")
	ErrDecodeHash     = errors.New("decodeHash")
)

func NewErrGenerateScrypt(err error) error {
	return errors.Join(err, ErrGenerateScrypt)
}

func NewErrCompareScrypt(err error) error {
	return errors.Join(err, ErrCompareScrypt)
}

func NewErrDecodeHash(err error) error {
	return errors.Join(err, ErrDecodeHash)
}

const (
	scryptHashLen = 6
)

// ScryptParams contains the parameters used to generate a hash using the Argon2 algorithm.
//
// You can use ScryptParamsDefault unless you have specific requirements.
type ScryptParams struct {
	// SaltLength is the length of the salt in bytes.
	SaltLength uint
	// Iterations is the number of iterations to use.
	Iterations uint32
	// Memory is the amount of memory used by the algorithm.
	Memory uint32
	// Parallelism is the number of threads to use.
	Parallelism uint8
	// KeyLength is the length of the derived key.
	KeyLength uint32
}

var ScryptParamsDefault = ScryptParams{
	SaltLength:  32, //nolint:mnd
	Iterations:  1,
	Memory:      64 * 1024, //nolint:mnd
	Parallelism: 4,         //nolint:mnd
	KeyLength:   32,        //nolint:mnd
}

// GenerateScrypt is a secure hash method, similar to bcrypt.GenerateFromPassword, but based on the newer
// Argon2 algorithm.
func GenerateScrypt(password string, params ScryptParams) (string, error) {
	// Generate a cryptographically secure random salt.
	salt := make([]byte, params.SaltLength)

	_, err := io.ReadFull(rand.Reader, salt)
	if err != nil {
		return "", NewErrGenerateScrypt(fmt.Errorf("generate salt: %w", err))
	}

	// Pass the plaintext password, salt and parameters to the argon2.IDKey
	// function. This will generate a hash of the password using the Argon2id
	// variant.
	hash := argon2.IDKey(
		[]byte(password),
		salt,
		params.Iterations,
		params.Memory,
		params.Parallelism,
		params.KeyLength,
	)

	b64Salt := base64.RawStdEncoding.EncodeToString(salt)
	b64Hash := base64.RawStdEncoding.EncodeToString(hash)

	// Return a string using the standard encoded hash representation.
	encodedHash := fmt.Sprintf(
		"$argon2id$v=%d$m=%d,t=%d,p=%d$%s$%s",
		argon2.Version,
		params.Memory,
		params.Iterations,
		params.Parallelism,
		b64Salt,
		b64Hash,
	)

	return encodedHash, nil
}

// CompareScrypt compares a password with an encoded hash generated by GenerateScrypt.
// It returns true if the password matches the hash, and false otherwise.
//
// This method is similar to bcrypt.CompareHashAndPassword, but based on the newer Argon2 algorithm.
func CompareScrypt(password, encodedHash string) error {
	// Extract the parameters, salt and derived key from the encoded password
	// hash.
	params, salt, hash, err := decodeHash(encodedHash)
	if err != nil {
		return NewErrCompareScrypt(err)
	}

	// Derive the key from the other password using the same parameters.
	otherHash := argon2.IDKey(
		[]byte(password),
		salt,
		params.Iterations,
		params.Memory,
		params.Parallelism,
		params.KeyLength,
	)

	// Check that the contents of the hashed passwords are identical. Note
	// that we are using the subtle.ConstantTimeCompare() function for this
	// to help prevent timing attacks.
	if subtle.ConstantTimeCompare(hash, otherHash) == 1 {
		return nil
	}

	return NewErrCompareScrypt(ErrInvalidPassword)
}

func decodeHash(encodedHash string) (*ScryptParams, []byte, []byte, error) {
	values := strings.Split(encodedHash, "$")
	if len(values) != scryptHashLen {
		return nil, nil, nil, ErrInvalidHash
	}

	var version int

	_, err := fmt.Sscanf(values[2], "v=%d", &version)
	if err != nil {
		return nil, nil, nil, NewErrDecodeHash(errors.Join(ErrInvalidHash, fmt.Errorf("parse version: %w", err)))
	}

	if version != argon2.Version {
		return nil, nil, nil, NewErrDecodeHash(ErrIncompatibleVersion)
	}

	params := &ScryptParams{}

	_, err = fmt.Sscanf(values[3], "m=%d,t=%d,p=%d", &params.Memory, &params.Iterations, &params.Parallelism)
	if err != nil {
		return nil, nil, nil, NewErrDecodeHash(errors.Join(ErrInvalidHash, fmt.Errorf("parse parameters: %w", err)))
	}

	salt, err := base64.RawStdEncoding.Strict().DecodeString(values[4])
	if err != nil {
		return nil, nil, nil, NewErrDecodeHash(errors.Join(ErrInvalidHash, fmt.Errorf("decode salt: %w", err)))
	}

	params.SaltLength = uint(len(salt))

	hash, err := base64.RawStdEncoding.Strict().DecodeString(values[5])
	if err != nil {
		return nil, nil, nil, NewErrDecodeHash(errors.Join(ErrInvalidHash, fmt.Errorf("decode hash: %w", err)))
	}

	rawHashLength := len(hash)
	if rawHashLength > math.MaxUint32 {
		return nil, nil, nil, NewErrDecodeHash(fmt.Errorf("%w: hash length: %d", ErrInvalidHash, rawHashLength))
	}

	params.KeyLength = uint32(rawHashLength)

	return params, salt, hash, nil
}
