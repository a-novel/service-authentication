// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package servicesmocks

import (
	"context"
	"text/template"

	"github.com/a-novel/golib/smtp"
	"github.com/a-novel/service-authentication/internal/dao"
	"github.com/a-novel/service-authentication/internal/services"
	models0 "github.com/a-novel/service-authentication/models"
	"github.com/a-novel/service-json-keys/models"
	"github.com/a-novel/service-json-keys/pkg"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConsumeRefreshTokenSource creates a new instance of MockConsumeRefreshTokenSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumeRefreshTokenSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumeRefreshTokenSource {
	mock := &MockConsumeRefreshTokenSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumeRefreshTokenSource is an autogenerated mock type for the ConsumeRefreshTokenSource type
type MockConsumeRefreshTokenSource struct {
	mock.Mock
}

type MockConsumeRefreshTokenSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumeRefreshTokenSource) EXPECT() *MockConsumeRefreshTokenSource_Expecter {
	return &MockConsumeRefreshTokenSource_Expecter{mock: &_m.Mock}
}

// SelectCredentials provides a mock function for the type MockConsumeRefreshTokenSource
func (_mock *MockConsumeRefreshTokenSource) SelectCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeRefreshTokenSource_SelectCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentials'
type MockConsumeRefreshTokenSource_SelectCredentials_Call struct {
	*mock.Call
}

// SelectCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockConsumeRefreshTokenSource_Expecter) SelectCredentials(ctx interface{}, id interface{}) *MockConsumeRefreshTokenSource_SelectCredentials_Call {
	return &MockConsumeRefreshTokenSource_SelectCredentials_Call{Call: _e.mock.On("SelectCredentials", ctx, id)}
}

func (_c *MockConsumeRefreshTokenSource_SelectCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockConsumeRefreshTokenSource_SelectCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConsumeRefreshTokenSource_SelectCredentials_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockConsumeRefreshTokenSource_SelectCredentials_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockConsumeRefreshTokenSource_SelectCredentials_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error)) *MockConsumeRefreshTokenSource_SelectCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// SignClaims provides a mock function for the type MockConsumeRefreshTokenSource
func (_mock *MockConsumeRefreshTokenSource) SignClaims(ctx context.Context, usage models.KeyUsage, claims any) (string, error) {
	ret := _mock.Called(ctx, usage, claims)

	if len(ret) == 0 {
		panic("no return value specified for SignClaims")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) (string, error)); ok {
		return returnFunc(ctx, usage, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) string); ok {
		r0 = returnFunc(ctx, usage, claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, any) error); ok {
		r1 = returnFunc(ctx, usage, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeRefreshTokenSource_SignClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignClaims'
type MockConsumeRefreshTokenSource_SignClaims_Call struct {
	*mock.Call
}

// SignClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
//   - claims any
func (_e *MockConsumeRefreshTokenSource_Expecter) SignClaims(ctx interface{}, usage interface{}, claims interface{}) *MockConsumeRefreshTokenSource_SignClaims_Call {
	return &MockConsumeRefreshTokenSource_SignClaims_Call{Call: _e.mock.On("SignClaims", ctx, usage, claims)}
}

func (_c *MockConsumeRefreshTokenSource_SignClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, claims any)) *MockConsumeRefreshTokenSource_SignClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.KeyUsage
		if args[1] != nil {
			arg1 = args[1].(models.KeyUsage)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConsumeRefreshTokenSource_SignClaims_Call) Return(s string, err error) *MockConsumeRefreshTokenSource_SignClaims_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockConsumeRefreshTokenSource_SignClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, claims any) (string, error)) *MockConsumeRefreshTokenSource_SignClaims_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyClaims provides a mock function for the type MockConsumeRefreshTokenSource
func (_mock *MockConsumeRefreshTokenSource) VerifyClaims(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions) (*models0.AccessTokenClaims, error) {
	ret := _mock.Called(ctx, usage, accessToken, options)

	if len(ret) == 0 {
		panic("no return value specified for VerifyClaims")
	}

	var r0 *models0.AccessTokenClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) (*models0.AccessTokenClaims, error)); ok {
		return returnFunc(ctx, usage, accessToken, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) *models0.AccessTokenClaims); ok {
		r0 = returnFunc(ctx, usage, accessToken, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.AccessTokenClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) error); ok {
		r1 = returnFunc(ctx, usage, accessToken, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeRefreshTokenSource_VerifyClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyClaims'
type MockConsumeRefreshTokenSource_VerifyClaims_Call struct {
	*mock.Call
}

// VerifyClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
//   - accessToken string
//   - options *pkg.VerifyClaimsOptions
func (_e *MockConsumeRefreshTokenSource_Expecter) VerifyClaims(ctx interface{}, usage interface{}, accessToken interface{}, options interface{}) *MockConsumeRefreshTokenSource_VerifyClaims_Call {
	return &MockConsumeRefreshTokenSource_VerifyClaims_Call{Call: _e.mock.On("VerifyClaims", ctx, usage, accessToken, options)}
}

func (_c *MockConsumeRefreshTokenSource_VerifyClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions)) *MockConsumeRefreshTokenSource_VerifyClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.KeyUsage
		if args[1] != nil {
			arg1 = args[1].(models.KeyUsage)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *pkg.VerifyClaimsOptions
		if args[3] != nil {
			arg3 = args[3].(*pkg.VerifyClaimsOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockConsumeRefreshTokenSource_VerifyClaims_Call) Return(accessTokenClaims *models0.AccessTokenClaims, err error) *MockConsumeRefreshTokenSource_VerifyClaims_Call {
	_c.Call.Return(accessTokenClaims, err)
	return _c
}

func (_c *MockConsumeRefreshTokenSource_VerifyClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions) (*models0.AccessTokenClaims, error)) *MockConsumeRefreshTokenSource_VerifyClaims_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyRefreshTokenClaims provides a mock function for the type MockConsumeRefreshTokenSource
func (_mock *MockConsumeRefreshTokenSource) VerifyRefreshTokenClaims(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions) (*models0.RefreshTokenClaims, error) {
	ret := _mock.Called(ctx, usage, accessToken, options)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRefreshTokenClaims")
	}

	var r0 *models0.RefreshTokenClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) (*models0.RefreshTokenClaims, error)); ok {
		return returnFunc(ctx, usage, accessToken, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) *models0.RefreshTokenClaims); ok {
		r0 = returnFunc(ctx, usage, accessToken, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.RefreshTokenClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) error); ok {
		r1 = returnFunc(ctx, usage, accessToken, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRefreshTokenClaims'
type MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call struct {
	*mock.Call
}

// VerifyRefreshTokenClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
//   - accessToken string
//   - options *pkg.VerifyClaimsOptions
func (_e *MockConsumeRefreshTokenSource_Expecter) VerifyRefreshTokenClaims(ctx interface{}, usage interface{}, accessToken interface{}, options interface{}) *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call {
	return &MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call{Call: _e.mock.On("VerifyRefreshTokenClaims", ctx, usage, accessToken, options)}
}

func (_c *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions)) *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.KeyUsage
		if args[1] != nil {
			arg1 = args[1].(models.KeyUsage)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *pkg.VerifyClaimsOptions
		if args[3] != nil {
			arg3 = args[3].(*pkg.VerifyClaimsOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call) Return(refreshTokenClaims *models0.RefreshTokenClaims, err error) *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call {
	_c.Call.Return(refreshTokenClaims, err)
	return _c
}

func (_c *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions) (*models0.RefreshTokenClaims, error)) *MockConsumeRefreshTokenSource_VerifyRefreshTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumeShortCodeSource creates a new instance of MockConsumeShortCodeSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumeShortCodeSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumeShortCodeSource {
	mock := &MockConsumeShortCodeSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumeShortCodeSource is an autogenerated mock type for the ConsumeShortCodeSource type
type MockConsumeShortCodeSource struct {
	mock.Mock
}

type MockConsumeShortCodeSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumeShortCodeSource) EXPECT() *MockConsumeShortCodeSource_Expecter {
	return &MockConsumeShortCodeSource_Expecter{mock: &_m.Mock}
}

// DeleteShortCode provides a mock function for the type MockConsumeShortCodeSource
func (_mock *MockConsumeShortCodeSource) DeleteShortCode(ctx context.Context, data dao.DeleteShortCodeData) (*dao.ShortCodeEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortCode")
	}

	var r0 *dao.ShortCodeEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.DeleteShortCodeData) (*dao.ShortCodeEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.DeleteShortCodeData) *dao.ShortCodeEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ShortCodeEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.DeleteShortCodeData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeShortCodeSource_DeleteShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteShortCode'
type MockConsumeShortCodeSource_DeleteShortCode_Call struct {
	*mock.Call
}

// DeleteShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.DeleteShortCodeData
func (_e *MockConsumeShortCodeSource_Expecter) DeleteShortCode(ctx interface{}, data interface{}) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	return &MockConsumeShortCodeSource_DeleteShortCode_Call{Call: _e.mock.On("DeleteShortCode", ctx, data)}
}

func (_c *MockConsumeShortCodeSource_DeleteShortCode_Call) Run(run func(ctx context.Context, data dao.DeleteShortCodeData)) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dao.DeleteShortCodeData
		if args[1] != nil {
			arg1 = args[1].(dao.DeleteShortCodeData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConsumeShortCodeSource_DeleteShortCode_Call) Return(shortCodeEntity *dao.ShortCodeEntity, err error) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	_c.Call.Return(shortCodeEntity, err)
	return _c
}

func (_c *MockConsumeShortCodeSource_DeleteShortCode_Call) RunAndReturn(run func(ctx context.Context, data dao.DeleteShortCodeData) (*dao.ShortCodeEntity, error)) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// SelectShortCodeByParams provides a mock function for the type MockConsumeShortCodeSource
func (_mock *MockConsumeShortCodeSource) SelectShortCodeByParams(ctx context.Context, data dao.SelectShortCodeByParamsData) (*dao.ShortCodeEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectShortCodeByParams")
	}

	var r0 *dao.ShortCodeEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectShortCodeByParamsData) (*dao.ShortCodeEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectShortCodeByParamsData) *dao.ShortCodeEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ShortCodeEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectShortCodeByParamsData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumeShortCodeSource_SelectShortCodeByParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectShortCodeByParams'
type MockConsumeShortCodeSource_SelectShortCodeByParams_Call struct {
	*mock.Call
}

// SelectShortCodeByParams is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.SelectShortCodeByParamsData
func (_e *MockConsumeShortCodeSource_Expecter) SelectShortCodeByParams(ctx interface{}, data interface{}) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	return &MockConsumeShortCodeSource_SelectShortCodeByParams_Call{Call: _e.mock.On("SelectShortCodeByParams", ctx, data)}
}

func (_c *MockConsumeShortCodeSource_SelectShortCodeByParams_Call) Run(run func(ctx context.Context, data dao.SelectShortCodeByParamsData)) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dao.SelectShortCodeByParamsData
		if args[1] != nil {
			arg1 = args[1].(dao.SelectShortCodeByParamsData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConsumeShortCodeSource_SelectShortCodeByParams_Call) Return(shortCodeEntity *dao.ShortCodeEntity, err error) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	_c.Call.Return(shortCodeEntity, err)
	return _c
}

func (_c *MockConsumeShortCodeSource_SelectShortCodeByParams_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectShortCodeByParamsData) (*dao.ShortCodeEntity, error)) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateShortCodeSource creates a new instance of MockCreateShortCodeSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateShortCodeSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateShortCodeSource {
	mock := &MockCreateShortCodeSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreateShortCodeSource is an autogenerated mock type for the CreateShortCodeSource type
type MockCreateShortCodeSource struct {
	mock.Mock
}

type MockCreateShortCodeSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateShortCodeSource) EXPECT() *MockCreateShortCodeSource_Expecter {
	return &MockCreateShortCodeSource_Expecter{mock: &_m.Mock}
}

// InsertShortCode provides a mock function for the type MockCreateShortCodeSource
func (_mock *MockCreateShortCodeSource) InsertShortCode(ctx context.Context, data dao.InsertShortCodeData) (*dao.ShortCodeEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertShortCode")
	}

	var r0 *dao.ShortCodeEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertShortCodeData) (*dao.ShortCodeEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertShortCodeData) *dao.ShortCodeEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ShortCodeEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.InsertShortCodeData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateShortCodeSource_InsertShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertShortCode'
type MockCreateShortCodeSource_InsertShortCode_Call struct {
	*mock.Call
}

// InsertShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.InsertShortCodeData
func (_e *MockCreateShortCodeSource_Expecter) InsertShortCode(ctx interface{}, data interface{}) *MockCreateShortCodeSource_InsertShortCode_Call {
	return &MockCreateShortCodeSource_InsertShortCode_Call{Call: _e.mock.On("InsertShortCode", ctx, data)}
}

func (_c *MockCreateShortCodeSource_InsertShortCode_Call) Run(run func(ctx context.Context, data dao.InsertShortCodeData)) *MockCreateShortCodeSource_InsertShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dao.InsertShortCodeData
		if args[1] != nil {
			arg1 = args[1].(dao.InsertShortCodeData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCreateShortCodeSource_InsertShortCode_Call) Return(shortCodeEntity *dao.ShortCodeEntity, err error) *MockCreateShortCodeSource_InsertShortCode_Call {
	_c.Call.Return(shortCodeEntity, err)
	return _c
}

func (_c *MockCreateShortCodeSource_InsertShortCode_Call) RunAndReturn(run func(ctx context.Context, data dao.InsertShortCodeData) (*dao.ShortCodeEntity, error)) *MockCreateShortCodeSource_InsertShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailExistsSource creates a new instance of MockEmailExistsSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailExistsSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailExistsSource {
	mock := &MockEmailExistsSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailExistsSource is an autogenerated mock type for the EmailExistsSource type
type MockEmailExistsSource struct {
	mock.Mock
}

type MockEmailExistsSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailExistsSource) EXPECT() *MockEmailExistsSource_Expecter {
	return &MockEmailExistsSource_Expecter{mock: &_m.Mock}
}

// ExistsCredentialsEmail provides a mock function for the type MockEmailExistsSource
func (_mock *MockEmailExistsSource) ExistsCredentialsEmail(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsCredentialsEmail")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEmailExistsSource_ExistsCredentialsEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsCredentialsEmail'
type MockEmailExistsSource_ExistsCredentialsEmail_Call struct {
	*mock.Call
}

// ExistsCredentialsEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockEmailExistsSource_Expecter) ExistsCredentialsEmail(ctx interface{}, email interface{}) *MockEmailExistsSource_ExistsCredentialsEmail_Call {
	return &MockEmailExistsSource_ExistsCredentialsEmail_Call{Call: _e.mock.On("ExistsCredentialsEmail", ctx, email)}
}

func (_c *MockEmailExistsSource_ExistsCredentialsEmail_Call) Run(run func(ctx context.Context, email string)) *MockEmailExistsSource_ExistsCredentialsEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEmailExistsSource_ExistsCredentialsEmail_Call) Return(b bool, err error) *MockEmailExistsSource_ExistsCredentialsEmail_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockEmailExistsSource_ExistsCredentialsEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *MockEmailExistsSource_ExistsCredentialsEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListUsersSource creates a new instance of MockListUsersSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListUsersSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListUsersSource {
	mock := &MockListUsersSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListUsersSource is an autogenerated mock type for the ListUsersSource type
type MockListUsersSource struct {
	mock.Mock
}

type MockListUsersSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListUsersSource) EXPECT() *MockListUsersSource_Expecter {
	return &MockListUsersSource_Expecter{mock: &_m.Mock}
}

// ListUsers provides a mock function for the type MockListUsersSource
func (_mock *MockListUsersSource) ListUsers(ctx context.Context, data dao.ListUsersData) ([]*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListUsersData) ([]*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListUsersData) []*dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.ListUsersData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListUsersSource_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockListUsersSource_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.ListUsersData
func (_e *MockListUsersSource_Expecter) ListUsers(ctx interface{}, data interface{}) *MockListUsersSource_ListUsers_Call {
	return &MockListUsersSource_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, data)}
}

func (_c *MockListUsersSource_ListUsers_Call) Run(run func(ctx context.Context, data dao.ListUsersData)) *MockListUsersSource_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dao.ListUsersData
		if args[1] != nil {
			arg1 = args[1].(dao.ListUsersData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockListUsersSource_ListUsers_Call) Return(credentialsEntitys []*dao.CredentialsEntity, err error) *MockListUsersSource_ListUsers_Call {
	_c.Call.Return(credentialsEntitys, err)
	return _c
}

func (_c *MockListUsersSource_ListUsers_Call) RunAndReturn(run func(ctx context.Context, data dao.ListUsersData) ([]*dao.CredentialsEntity, error)) *MockListUsersSource_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginSource creates a new instance of MockLoginSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginSource {
	mock := &MockLoginSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginSource is an autogenerated mock type for the LoginSource type
type MockLoginSource struct {
	mock.Mock
}

type MockLoginSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginSource) EXPECT() *MockLoginSource_Expecter {
	return &MockLoginSource_Expecter{mock: &_m.Mock}
}

// SelectCredentialsByEmail provides a mock function for the type MockLoginSource
func (_mock *MockLoginSource) SelectCredentialsByEmail(ctx context.Context, email string) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentialsByEmail")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginSource_SelectCredentialsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentialsByEmail'
type MockLoginSource_SelectCredentialsByEmail_Call struct {
	*mock.Call
}

// SelectCredentialsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockLoginSource_Expecter) SelectCredentialsByEmail(ctx interface{}, email interface{}) *MockLoginSource_SelectCredentialsByEmail_Call {
	return &MockLoginSource_SelectCredentialsByEmail_Call{Call: _e.mock.On("SelectCredentialsByEmail", ctx, email)}
}

func (_c *MockLoginSource_SelectCredentialsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockLoginSource_SelectCredentialsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLoginSource_SelectCredentialsByEmail_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockLoginSource_SelectCredentialsByEmail_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockLoginSource_SelectCredentialsByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*dao.CredentialsEntity, error)) *MockLoginSource_SelectCredentialsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SignClaims provides a mock function for the type MockLoginSource
func (_mock *MockLoginSource) SignClaims(ctx context.Context, usage models.KeyUsage, claims any) (string, error) {
	ret := _mock.Called(ctx, usage, claims)

	if len(ret) == 0 {
		panic("no return value specified for SignClaims")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) (string, error)); ok {
		return returnFunc(ctx, usage, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) string); ok {
		r0 = returnFunc(ctx, usage, claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, any) error); ok {
		r1 = returnFunc(ctx, usage, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginSource_SignClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignClaims'
type MockLoginSource_SignClaims_Call struct {
	*mock.Call
}

// SignClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
//   - claims any
func (_e *MockLoginSource_Expecter) SignClaims(ctx interface{}, usage interface{}, claims interface{}) *MockLoginSource_SignClaims_Call {
	return &MockLoginSource_SignClaims_Call{Call: _e.mock.On("SignClaims", ctx, usage, claims)}
}

func (_c *MockLoginSource_SignClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, claims any)) *MockLoginSource_SignClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.KeyUsage
		if args[1] != nil {
			arg1 = args[1].(models.KeyUsage)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLoginSource_SignClaims_Call) Return(s string, err error) *MockLoginSource_SignClaims_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLoginSource_SignClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, claims any) (string, error)) *MockLoginSource_SignClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginAnonSource creates a new instance of MockLoginAnonSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginAnonSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginAnonSource {
	mock := &MockLoginAnonSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginAnonSource is an autogenerated mock type for the LoginAnonSource type
type MockLoginAnonSource struct {
	mock.Mock
}

type MockLoginAnonSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginAnonSource) EXPECT() *MockLoginAnonSource_Expecter {
	return &MockLoginAnonSource_Expecter{mock: &_m.Mock}
}

// SignClaims provides a mock function for the type MockLoginAnonSource
func (_mock *MockLoginAnonSource) SignClaims(ctx context.Context, usage models.KeyUsage, claims any) (string, error) {
	ret := _mock.Called(ctx, usage, claims)

	if len(ret) == 0 {
		panic("no return value specified for SignClaims")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) (string, error)); ok {
		return returnFunc(ctx, usage, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) string); ok {
		r0 = returnFunc(ctx, usage, claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, any) error); ok {
		r1 = returnFunc(ctx, usage, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginAnonSource_SignClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignClaims'
type MockLoginAnonSource_SignClaims_Call struct {
	*mock.Call
}

// SignClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
//   - claims any
func (_e *MockLoginAnonSource_Expecter) SignClaims(ctx interface{}, usage interface{}, claims interface{}) *MockLoginAnonSource_SignClaims_Call {
	return &MockLoginAnonSource_SignClaims_Call{Call: _e.mock.On("SignClaims", ctx, usage, claims)}
}

func (_c *MockLoginAnonSource_SignClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, claims any)) *MockLoginAnonSource_SignClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.KeyUsage
		if args[1] != nil {
			arg1 = args[1].(models.KeyUsage)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLoginAnonSource_SignClaims_Call) Return(s string, err error) *MockLoginAnonSource_SignClaims_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLoginAnonSource_SignClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, claims any) (string, error)) *MockLoginAnonSource_SignClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterSource creates a new instance of MockRegisterSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterSource {
	mock := &MockRegisterSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegisterSource is an autogenerated mock type for the RegisterSource type
type MockRegisterSource struct {
	mock.Mock
}

type MockRegisterSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterSource) EXPECT() *MockRegisterSource_Expecter {
	return &MockRegisterSource_Expecter{mock: &_m.Mock}
}

// ConsumeShortCode provides a mock function for the type MockRegisterSource
func (_mock *MockRegisterSource) ConsumeShortCode(ctx context.Context, request services.ConsumeShortCodeRequest) (*models0.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeShortCode")
	}

	var r0 *models0.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) (*models0.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) *models0.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ConsumeShortCodeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterSource_ConsumeShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeShortCode'
type MockRegisterSource_ConsumeShortCode_Call struct {
	*mock.Call
}

// ConsumeShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ConsumeShortCodeRequest
func (_e *MockRegisterSource_Expecter) ConsumeShortCode(ctx interface{}, request interface{}) *MockRegisterSource_ConsumeShortCode_Call {
	return &MockRegisterSource_ConsumeShortCode_Call{Call: _e.mock.On("ConsumeShortCode", ctx, request)}
}

func (_c *MockRegisterSource_ConsumeShortCode_Call) Run(run func(ctx context.Context, request services.ConsumeShortCodeRequest)) *MockRegisterSource_ConsumeShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ConsumeShortCodeRequest
		if args[1] != nil {
			arg1 = args[1].(services.ConsumeShortCodeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegisterSource_ConsumeShortCode_Call) Return(shortCode *models0.ShortCode, err error) *MockRegisterSource_ConsumeShortCode_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRegisterSource_ConsumeShortCode_Call) RunAndReturn(run func(ctx context.Context, request services.ConsumeShortCodeRequest) (*models0.ShortCode, error)) *MockRegisterSource_ConsumeShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCredentials provides a mock function for the type MockRegisterSource
func (_mock *MockRegisterSource) InsertCredentials(ctx context.Context, data dao.InsertCredentialsData) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertCredentialsData) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertCredentialsData) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.InsertCredentialsData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterSource_InsertCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCredentials'
type MockRegisterSource_InsertCredentials_Call struct {
	*mock.Call
}

// InsertCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.InsertCredentialsData
func (_e *MockRegisterSource_Expecter) InsertCredentials(ctx interface{}, data interface{}) *MockRegisterSource_InsertCredentials_Call {
	return &MockRegisterSource_InsertCredentials_Call{Call: _e.mock.On("InsertCredentials", ctx, data)}
}

func (_c *MockRegisterSource_InsertCredentials_Call) Run(run func(ctx context.Context, data dao.InsertCredentialsData)) *MockRegisterSource_InsertCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dao.InsertCredentialsData
		if args[1] != nil {
			arg1 = args[1].(dao.InsertCredentialsData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegisterSource_InsertCredentials_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockRegisterSource_InsertCredentials_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockRegisterSource_InsertCredentials_Call) RunAndReturn(run func(ctx context.Context, data dao.InsertCredentialsData) (*dao.CredentialsEntity, error)) *MockRegisterSource_InsertCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// SignClaims provides a mock function for the type MockRegisterSource
func (_mock *MockRegisterSource) SignClaims(ctx context.Context, usage models.KeyUsage, claims any) (string, error) {
	ret := _mock.Called(ctx, usage, claims)

	if len(ret) == 0 {
		panic("no return value specified for SignClaims")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) (string, error)); ok {
		return returnFunc(ctx, usage, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, any) string); ok {
		r0 = returnFunc(ctx, usage, claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, any) error); ok {
		r1 = returnFunc(ctx, usage, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterSource_SignClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignClaims'
type MockRegisterSource_SignClaims_Call struct {
	*mock.Call
}

// SignClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
//   - claims any
func (_e *MockRegisterSource_Expecter) SignClaims(ctx interface{}, usage interface{}, claims interface{}) *MockRegisterSource_SignClaims_Call {
	return &MockRegisterSource_SignClaims_Call{Call: _e.mock.On("SignClaims", ctx, usage, claims)}
}

func (_c *MockRegisterSource_SignClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, claims any)) *MockRegisterSource_SignClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.KeyUsage
		if args[1] != nil {
			arg1 = args[1].(models.KeyUsage)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRegisterSource_SignClaims_Call) Return(s string, err error) *MockRegisterSource_SignClaims_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRegisterSource_SignClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, claims any) (string, error)) *MockRegisterSource_SignClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestEmailUpdateSource creates a new instance of MockRequestEmailUpdateSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestEmailUpdateSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestEmailUpdateSource {
	mock := &MockRequestEmailUpdateSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestEmailUpdateSource is an autogenerated mock type for the RequestEmailUpdateSource type
type MockRequestEmailUpdateSource struct {
	mock.Mock
}

type MockRequestEmailUpdateSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestEmailUpdateSource) EXPECT() *MockRequestEmailUpdateSource_Expecter {
	return &MockRequestEmailUpdateSource_Expecter{mock: &_m.Mock}
}

// CreateShortCode provides a mock function for the type MockRequestEmailUpdateSource
func (_mock *MockRequestEmailUpdateSource) CreateShortCode(ctx context.Context, request services.CreateShortCodeRequest) (*models0.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortCode")
	}

	var r0 *models0.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) (*models0.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) *models0.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.CreateShortCodeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestEmailUpdateSource_CreateShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortCode'
type MockRequestEmailUpdateSource_CreateShortCode_Call struct {
	*mock.Call
}

// CreateShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.CreateShortCodeRequest
func (_e *MockRequestEmailUpdateSource_Expecter) CreateShortCode(ctx interface{}, request interface{}) *MockRequestEmailUpdateSource_CreateShortCode_Call {
	return &MockRequestEmailUpdateSource_CreateShortCode_Call{Call: _e.mock.On("CreateShortCode", ctx, request)}
}

func (_c *MockRequestEmailUpdateSource_CreateShortCode_Call) Run(run func(ctx context.Context, request services.CreateShortCodeRequest)) *MockRequestEmailUpdateSource_CreateShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.CreateShortCodeRequest
		if args[1] != nil {
			arg1 = args[1].(services.CreateShortCodeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRequestEmailUpdateSource_CreateShortCode_Call) Return(shortCode *models0.ShortCode, err error) *MockRequestEmailUpdateSource_CreateShortCode_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRequestEmailUpdateSource_CreateShortCode_Call) RunAndReturn(run func(ctx context.Context, request services.CreateShortCodeRequest) (*models0.ShortCode, error)) *MockRequestEmailUpdateSource_CreateShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockRequestEmailUpdateSource
func (_mock *MockRequestEmailUpdateSource) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRequestEmailUpdateSource_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRequestEmailUpdateSource_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockRequestEmailUpdateSource_Expecter) Ping() *MockRequestEmailUpdateSource_Ping_Call {
	return &MockRequestEmailUpdateSource_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockRequestEmailUpdateSource_Ping_Call) Run(run func()) *MockRequestEmailUpdateSource_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestEmailUpdateSource_Ping_Call) Return(err error) *MockRequestEmailUpdateSource_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRequestEmailUpdateSource_Ping_Call) RunAndReturn(run func() error) *MockRequestEmailUpdateSource_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SendMail provides a mock function for the type MockRequestEmailUpdateSource
func (_mock *MockRequestEmailUpdateSource) SendMail(to smtp.MailUsers, t *template.Template, tName string, data any) error {
	ret := _mock.Called(to, t, tName, data)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(smtp.MailUsers, *template.Template, string, any) error); ok {
		r0 = returnFunc(to, t, tName, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRequestEmailUpdateSource_SendMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMail'
type MockRequestEmailUpdateSource_SendMail_Call struct {
	*mock.Call
}

// SendMail is a helper method to define mock.On call
//   - to smtp.MailUsers
//   - t *template.Template
//   - tName string
//   - data any
func (_e *MockRequestEmailUpdateSource_Expecter) SendMail(to interface{}, t interface{}, tName interface{}, data interface{}) *MockRequestEmailUpdateSource_SendMail_Call {
	return &MockRequestEmailUpdateSource_SendMail_Call{Call: _e.mock.On("SendMail", to, t, tName, data)}
}

func (_c *MockRequestEmailUpdateSource_SendMail_Call) Run(run func(to smtp.MailUsers, t *template.Template, tName string, data any)) *MockRequestEmailUpdateSource_SendMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 smtp.MailUsers
		if args[0] != nil {
			arg0 = args[0].(smtp.MailUsers)
		}
		var arg1 *template.Template
		if args[1] != nil {
			arg1 = args[1].(*template.Template)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRequestEmailUpdateSource_SendMail_Call) Return(err error) *MockRequestEmailUpdateSource_SendMail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRequestEmailUpdateSource_SendMail_Call) RunAndReturn(run func(to smtp.MailUsers, t *template.Template, tName string, data any) error) *MockRequestEmailUpdateSource_SendMail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestPasswordResetSource creates a new instance of MockRequestPasswordResetSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestPasswordResetSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestPasswordResetSource {
	mock := &MockRequestPasswordResetSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestPasswordResetSource is an autogenerated mock type for the RequestPasswordResetSource type
type MockRequestPasswordResetSource struct {
	mock.Mock
}

type MockRequestPasswordResetSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestPasswordResetSource) EXPECT() *MockRequestPasswordResetSource_Expecter {
	return &MockRequestPasswordResetSource_Expecter{mock: &_m.Mock}
}

// CreateShortCode provides a mock function for the type MockRequestPasswordResetSource
func (_mock *MockRequestPasswordResetSource) CreateShortCode(ctx context.Context, request services.CreateShortCodeRequest) (*models0.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortCode")
	}

	var r0 *models0.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) (*models0.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) *models0.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.CreateShortCodeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestPasswordResetSource_CreateShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortCode'
type MockRequestPasswordResetSource_CreateShortCode_Call struct {
	*mock.Call
}

// CreateShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.CreateShortCodeRequest
func (_e *MockRequestPasswordResetSource_Expecter) CreateShortCode(ctx interface{}, request interface{}) *MockRequestPasswordResetSource_CreateShortCode_Call {
	return &MockRequestPasswordResetSource_CreateShortCode_Call{Call: _e.mock.On("CreateShortCode", ctx, request)}
}

func (_c *MockRequestPasswordResetSource_CreateShortCode_Call) Run(run func(ctx context.Context, request services.CreateShortCodeRequest)) *MockRequestPasswordResetSource_CreateShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.CreateShortCodeRequest
		if args[1] != nil {
			arg1 = args[1].(services.CreateShortCodeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRequestPasswordResetSource_CreateShortCode_Call) Return(shortCode *models0.ShortCode, err error) *MockRequestPasswordResetSource_CreateShortCode_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRequestPasswordResetSource_CreateShortCode_Call) RunAndReturn(run func(ctx context.Context, request services.CreateShortCodeRequest) (*models0.ShortCode, error)) *MockRequestPasswordResetSource_CreateShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockRequestPasswordResetSource
func (_mock *MockRequestPasswordResetSource) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRequestPasswordResetSource_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRequestPasswordResetSource_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockRequestPasswordResetSource_Expecter) Ping() *MockRequestPasswordResetSource_Ping_Call {
	return &MockRequestPasswordResetSource_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockRequestPasswordResetSource_Ping_Call) Run(run func()) *MockRequestPasswordResetSource_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestPasswordResetSource_Ping_Call) Return(err error) *MockRequestPasswordResetSource_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRequestPasswordResetSource_Ping_Call) RunAndReturn(run func() error) *MockRequestPasswordResetSource_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SelectCredentialsByEmail provides a mock function for the type MockRequestPasswordResetSource
func (_mock *MockRequestPasswordResetSource) SelectCredentialsByEmail(ctx context.Context, email string) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentialsByEmail")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestPasswordResetSource_SelectCredentialsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentialsByEmail'
type MockRequestPasswordResetSource_SelectCredentialsByEmail_Call struct {
	*mock.Call
}

// SelectCredentialsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockRequestPasswordResetSource_Expecter) SelectCredentialsByEmail(ctx interface{}, email interface{}) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	return &MockRequestPasswordResetSource_SelectCredentialsByEmail_Call{Call: _e.mock.On("SelectCredentialsByEmail", ctx, email)}
}

func (_c *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*dao.CredentialsEntity, error)) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendMail provides a mock function for the type MockRequestPasswordResetSource
func (_mock *MockRequestPasswordResetSource) SendMail(to smtp.MailUsers, t *template.Template, tName string, data any) error {
	ret := _mock.Called(to, t, tName, data)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(smtp.MailUsers, *template.Template, string, any) error); ok {
		r0 = returnFunc(to, t, tName, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRequestPasswordResetSource_SendMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMail'
type MockRequestPasswordResetSource_SendMail_Call struct {
	*mock.Call
}

// SendMail is a helper method to define mock.On call
//   - to smtp.MailUsers
//   - t *template.Template
//   - tName string
//   - data any
func (_e *MockRequestPasswordResetSource_Expecter) SendMail(to interface{}, t interface{}, tName interface{}, data interface{}) *MockRequestPasswordResetSource_SendMail_Call {
	return &MockRequestPasswordResetSource_SendMail_Call{Call: _e.mock.On("SendMail", to, t, tName, data)}
}

func (_c *MockRequestPasswordResetSource_SendMail_Call) Run(run func(to smtp.MailUsers, t *template.Template, tName string, data any)) *MockRequestPasswordResetSource_SendMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 smtp.MailUsers
		if args[0] != nil {
			arg0 = args[0].(smtp.MailUsers)
		}
		var arg1 *template.Template
		if args[1] != nil {
			arg1 = args[1].(*template.Template)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRequestPasswordResetSource_SendMail_Call) Return(err error) *MockRequestPasswordResetSource_SendMail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRequestPasswordResetSource_SendMail_Call) RunAndReturn(run func(to smtp.MailUsers, t *template.Template, tName string, data any) error) *MockRequestPasswordResetSource_SendMail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestRegisterSource creates a new instance of MockRequestRegisterSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestRegisterSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestRegisterSource {
	mock := &MockRequestRegisterSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestRegisterSource is an autogenerated mock type for the RequestRegisterSource type
type MockRequestRegisterSource struct {
	mock.Mock
}

type MockRequestRegisterSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestRegisterSource) EXPECT() *MockRequestRegisterSource_Expecter {
	return &MockRequestRegisterSource_Expecter{mock: &_m.Mock}
}

// CreateShortCode provides a mock function for the type MockRequestRegisterSource
func (_mock *MockRequestRegisterSource) CreateShortCode(ctx context.Context, request services.CreateShortCodeRequest) (*models0.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortCode")
	}

	var r0 *models0.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) (*models0.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) *models0.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.CreateShortCodeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestRegisterSource_CreateShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortCode'
type MockRequestRegisterSource_CreateShortCode_Call struct {
	*mock.Call
}

// CreateShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.CreateShortCodeRequest
func (_e *MockRequestRegisterSource_Expecter) CreateShortCode(ctx interface{}, request interface{}) *MockRequestRegisterSource_CreateShortCode_Call {
	return &MockRequestRegisterSource_CreateShortCode_Call{Call: _e.mock.On("CreateShortCode", ctx, request)}
}

func (_c *MockRequestRegisterSource_CreateShortCode_Call) Run(run func(ctx context.Context, request services.CreateShortCodeRequest)) *MockRequestRegisterSource_CreateShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.CreateShortCodeRequest
		if args[1] != nil {
			arg1 = args[1].(services.CreateShortCodeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRequestRegisterSource_CreateShortCode_Call) Return(shortCode *models0.ShortCode, err error) *MockRequestRegisterSource_CreateShortCode_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockRequestRegisterSource_CreateShortCode_Call) RunAndReturn(run func(ctx context.Context, request services.CreateShortCodeRequest) (*models0.ShortCode, error)) *MockRequestRegisterSource_CreateShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockRequestRegisterSource
func (_mock *MockRequestRegisterSource) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRequestRegisterSource_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRequestRegisterSource_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockRequestRegisterSource_Expecter) Ping() *MockRequestRegisterSource_Ping_Call {
	return &MockRequestRegisterSource_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockRequestRegisterSource_Ping_Call) Run(run func()) *MockRequestRegisterSource_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestRegisterSource_Ping_Call) Return(err error) *MockRequestRegisterSource_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRequestRegisterSource_Ping_Call) RunAndReturn(run func() error) *MockRequestRegisterSource_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SendMail provides a mock function for the type MockRequestRegisterSource
func (_mock *MockRequestRegisterSource) SendMail(to smtp.MailUsers, t *template.Template, tName string, data any) error {
	ret := _mock.Called(to, t, tName, data)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(smtp.MailUsers, *template.Template, string, any) error); ok {
		r0 = returnFunc(to, t, tName, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRequestRegisterSource_SendMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMail'
type MockRequestRegisterSource_SendMail_Call struct {
	*mock.Call
}

// SendMail is a helper method to define mock.On call
//   - to smtp.MailUsers
//   - t *template.Template
//   - tName string
//   - data any
func (_e *MockRequestRegisterSource_Expecter) SendMail(to interface{}, t interface{}, tName interface{}, data interface{}) *MockRequestRegisterSource_SendMail_Call {
	return &MockRequestRegisterSource_SendMail_Call{Call: _e.mock.On("SendMail", to, t, tName, data)}
}

func (_c *MockRequestRegisterSource_SendMail_Call) Run(run func(to smtp.MailUsers, t *template.Template, tName string, data any)) *MockRequestRegisterSource_SendMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 smtp.MailUsers
		if args[0] != nil {
			arg0 = args[0].(smtp.MailUsers)
		}
		var arg1 *template.Template
		if args[1] != nil {
			arg1 = args[1].(*template.Template)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRequestRegisterSource_SendMail_Call) Return(err error) *MockRequestRegisterSource_SendMail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRequestRegisterSource_SendMail_Call) RunAndReturn(run func(to smtp.MailUsers, t *template.Template, tName string, data any) error) *MockRequestRegisterSource_SendMail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectUserSource creates a new instance of MockSelectUserSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectUserSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectUserSource {
	mock := &MockSelectUserSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectUserSource is an autogenerated mock type for the SelectUserSource type
type MockSelectUserSource struct {
	mock.Mock
}

type MockSelectUserSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectUserSource) EXPECT() *MockSelectUserSource_Expecter {
	return &MockSelectUserSource_Expecter{mock: &_m.Mock}
}

// SelectCredentials provides a mock function for the type MockSelectUserSource
func (_mock *MockSelectUserSource) SelectCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectUserSource_SelectCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentials'
type MockSelectUserSource_SelectCredentials_Call struct {
	*mock.Call
}

// SelectCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSelectUserSource_Expecter) SelectCredentials(ctx interface{}, id interface{}) *MockSelectUserSource_SelectCredentials_Call {
	return &MockSelectUserSource_SelectCredentials_Call{Call: _e.mock.On("SelectCredentials", ctx, id)}
}

func (_c *MockSelectUserSource_SelectCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSelectUserSource_SelectCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSelectUserSource_SelectCredentials_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockSelectUserSource_SelectCredentials_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockSelectUserSource_SelectCredentials_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error)) *MockSelectUserSource_SelectCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateEmailSource creates a new instance of MockUpdateEmailSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateEmailSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateEmailSource {
	mock := &MockUpdateEmailSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdateEmailSource is an autogenerated mock type for the UpdateEmailSource type
type MockUpdateEmailSource struct {
	mock.Mock
}

type MockUpdateEmailSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateEmailSource) EXPECT() *MockUpdateEmailSource_Expecter {
	return &MockUpdateEmailSource_Expecter{mock: &_m.Mock}
}

// ConsumeShortCode provides a mock function for the type MockUpdateEmailSource
func (_mock *MockUpdateEmailSource) ConsumeShortCode(ctx context.Context, request services.ConsumeShortCodeRequest) (*models0.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeShortCode")
	}

	var r0 *models0.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) (*models0.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) *models0.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ConsumeShortCodeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateEmailSource_ConsumeShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeShortCode'
type MockUpdateEmailSource_ConsumeShortCode_Call struct {
	*mock.Call
}

// ConsumeShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ConsumeShortCodeRequest
func (_e *MockUpdateEmailSource_Expecter) ConsumeShortCode(ctx interface{}, request interface{}) *MockUpdateEmailSource_ConsumeShortCode_Call {
	return &MockUpdateEmailSource_ConsumeShortCode_Call{Call: _e.mock.On("ConsumeShortCode", ctx, request)}
}

func (_c *MockUpdateEmailSource_ConsumeShortCode_Call) Run(run func(ctx context.Context, request services.ConsumeShortCodeRequest)) *MockUpdateEmailSource_ConsumeShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ConsumeShortCodeRequest
		if args[1] != nil {
			arg1 = args[1].(services.ConsumeShortCodeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUpdateEmailSource_ConsumeShortCode_Call) Return(shortCode *models0.ShortCode, err error) *MockUpdateEmailSource_ConsumeShortCode_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockUpdateEmailSource_ConsumeShortCode_Call) RunAndReturn(run func(ctx context.Context, request services.ConsumeShortCodeRequest) (*models0.ShortCode, error)) *MockUpdateEmailSource_ConsumeShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialsEmail provides a mock function for the type MockUpdateEmailSource
func (_mock *MockUpdateEmailSource) UpdateCredentialsEmail(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsEmailData) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, userID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialsEmail")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, userID, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) error); ok {
		r1 = returnFunc(ctx, userID, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateEmailSource_UpdateCredentialsEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialsEmail'
type MockUpdateEmailSource_UpdateCredentialsEmail_Call struct {
	*mock.Call
}

// UpdateCredentialsEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - data dao.UpdateCredentialsEmailData
func (_e *MockUpdateEmailSource_Expecter) UpdateCredentialsEmail(ctx interface{}, userID interface{}, data interface{}) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	return &MockUpdateEmailSource_UpdateCredentialsEmail_Call{Call: _e.mock.On("UpdateCredentialsEmail", ctx, userID, data)}
}

func (_c *MockUpdateEmailSource_UpdateCredentialsEmail_Call) Run(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsEmailData)) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 dao.UpdateCredentialsEmailData
		if args[2] != nil {
			arg2 = args[2].(dao.UpdateCredentialsEmailData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUpdateEmailSource_UpdateCredentialsEmail_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockUpdateEmailSource_UpdateCredentialsEmail_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsEmailData) (*dao.CredentialsEntity, error)) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdatePasswordSource creates a new instance of MockUpdatePasswordSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdatePasswordSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdatePasswordSource {
	mock := &MockUpdatePasswordSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdatePasswordSource is an autogenerated mock type for the UpdatePasswordSource type
type MockUpdatePasswordSource struct {
	mock.Mock
}

type MockUpdatePasswordSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdatePasswordSource) EXPECT() *MockUpdatePasswordSource_Expecter {
	return &MockUpdatePasswordSource_Expecter{mock: &_m.Mock}
}

// ConsumeShortCode provides a mock function for the type MockUpdatePasswordSource
func (_mock *MockUpdatePasswordSource) ConsumeShortCode(ctx context.Context, request services.ConsumeShortCodeRequest) (*models0.ShortCode, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeShortCode")
	}

	var r0 *models0.ShortCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) (*models0.ShortCode, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) *models0.ShortCode); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.ShortCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ConsumeShortCodeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdatePasswordSource_ConsumeShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeShortCode'
type MockUpdatePasswordSource_ConsumeShortCode_Call struct {
	*mock.Call
}

// ConsumeShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ConsumeShortCodeRequest
func (_e *MockUpdatePasswordSource_Expecter) ConsumeShortCode(ctx interface{}, request interface{}) *MockUpdatePasswordSource_ConsumeShortCode_Call {
	return &MockUpdatePasswordSource_ConsumeShortCode_Call{Call: _e.mock.On("ConsumeShortCode", ctx, request)}
}

func (_c *MockUpdatePasswordSource_ConsumeShortCode_Call) Run(run func(ctx context.Context, request services.ConsumeShortCodeRequest)) *MockUpdatePasswordSource_ConsumeShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ConsumeShortCodeRequest
		if args[1] != nil {
			arg1 = args[1].(services.ConsumeShortCodeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUpdatePasswordSource_ConsumeShortCode_Call) Return(shortCode *models0.ShortCode, err error) *MockUpdatePasswordSource_ConsumeShortCode_Call {
	_c.Call.Return(shortCode, err)
	return _c
}

func (_c *MockUpdatePasswordSource_ConsumeShortCode_Call) RunAndReturn(run func(ctx context.Context, request services.ConsumeShortCodeRequest) (*models0.ShortCode, error)) *MockUpdatePasswordSource_ConsumeShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// SelectCredentials provides a mock function for the type MockUpdatePasswordSource
func (_mock *MockUpdatePasswordSource) SelectCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdatePasswordSource_SelectCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentials'
type MockUpdatePasswordSource_SelectCredentials_Call struct {
	*mock.Call
}

// SelectCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUpdatePasswordSource_Expecter) SelectCredentials(ctx interface{}, id interface{}) *MockUpdatePasswordSource_SelectCredentials_Call {
	return &MockUpdatePasswordSource_SelectCredentials_Call{Call: _e.mock.On("SelectCredentials", ctx, id)}
}

func (_c *MockUpdatePasswordSource_SelectCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUpdatePasswordSource_SelectCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUpdatePasswordSource_SelectCredentials_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockUpdatePasswordSource_SelectCredentials_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockUpdatePasswordSource_SelectCredentials_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error)) *MockUpdatePasswordSource_SelectCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialsPassword provides a mock function for the type MockUpdatePasswordSource
func (_mock *MockUpdatePasswordSource) UpdateCredentialsPassword(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsPasswordData) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, userID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialsPassword")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsPasswordData) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, userID, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsPasswordData) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, dao.UpdateCredentialsPasswordData) error); ok {
		r1 = returnFunc(ctx, userID, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdatePasswordSource_UpdateCredentialsPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialsPassword'
type MockUpdatePasswordSource_UpdateCredentialsPassword_Call struct {
	*mock.Call
}

// UpdateCredentialsPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - data dao.UpdateCredentialsPasswordData
func (_e *MockUpdatePasswordSource_Expecter) UpdateCredentialsPassword(ctx interface{}, userID interface{}, data interface{}) *MockUpdatePasswordSource_UpdateCredentialsPassword_Call {
	return &MockUpdatePasswordSource_UpdateCredentialsPassword_Call{Call: _e.mock.On("UpdateCredentialsPassword", ctx, userID, data)}
}

func (_c *MockUpdatePasswordSource_UpdateCredentialsPassword_Call) Run(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsPasswordData)) *MockUpdatePasswordSource_UpdateCredentialsPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 dao.UpdateCredentialsPasswordData
		if args[2] != nil {
			arg2 = args[2].(dao.UpdateCredentialsPasswordData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUpdatePasswordSource_UpdateCredentialsPassword_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockUpdatePasswordSource_UpdateCredentialsPassword_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockUpdatePasswordSource_UpdateCredentialsPassword_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsPasswordData) (*dao.CredentialsEntity, error)) *MockUpdatePasswordSource_UpdateCredentialsPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateRoleSource creates a new instance of MockUpdateRoleSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateRoleSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateRoleSource {
	mock := &MockUpdateRoleSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdateRoleSource is an autogenerated mock type for the UpdateRoleSource type
type MockUpdateRoleSource struct {
	mock.Mock
}

type MockUpdateRoleSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateRoleSource) EXPECT() *MockUpdateRoleSource_Expecter {
	return &MockUpdateRoleSource_Expecter{mock: &_m.Mock}
}

// SelectCredentials provides a mock function for the type MockUpdateRoleSource
func (_mock *MockUpdateRoleSource) SelectCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateRoleSource_SelectCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentials'
type MockUpdateRoleSource_SelectCredentials_Call struct {
	*mock.Call
}

// SelectCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUpdateRoleSource_Expecter) SelectCredentials(ctx interface{}, id interface{}) *MockUpdateRoleSource_SelectCredentials_Call {
	return &MockUpdateRoleSource_SelectCredentials_Call{Call: _e.mock.On("SelectCredentials", ctx, id)}
}

func (_c *MockUpdateRoleSource_SelectCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUpdateRoleSource_SelectCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUpdateRoleSource_SelectCredentials_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockUpdateRoleSource_SelectCredentials_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockUpdateRoleSource_SelectCredentials_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error)) *MockUpdateRoleSource_SelectCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialsRole provides a mock function for the type MockUpdateRoleSource
func (_mock *MockUpdateRoleSource) UpdateCredentialsRole(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsRoleData) (*dao.CredentialsEntity, error) {
	ret := _mock.Called(ctx, userID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialsRole")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) (*dao.CredentialsEntity, error)); ok {
		return returnFunc(ctx, userID, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) *dao.CredentialsEntity); ok {
		r0 = returnFunc(ctx, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) error); ok {
		r1 = returnFunc(ctx, userID, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateRoleSource_UpdateCredentialsRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialsRole'
type MockUpdateRoleSource_UpdateCredentialsRole_Call struct {
	*mock.Call
}

// UpdateCredentialsRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - data dao.UpdateCredentialsRoleData
func (_e *MockUpdateRoleSource_Expecter) UpdateCredentialsRole(ctx interface{}, userID interface{}, data interface{}) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	return &MockUpdateRoleSource_UpdateCredentialsRole_Call{Call: _e.mock.On("UpdateCredentialsRole", ctx, userID, data)}
}

func (_c *MockUpdateRoleSource_UpdateCredentialsRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsRoleData)) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 dao.UpdateCredentialsRoleData
		if args[2] != nil {
			arg2 = args[2].(dao.UpdateCredentialsRoleData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUpdateRoleSource_UpdateCredentialsRole_Call) Return(credentialsEntity *dao.CredentialsEntity, err error) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	_c.Call.Return(credentialsEntity, err)
	return _c
}

func (_c *MockUpdateRoleSource_UpdateCredentialsRole_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsRoleData) (*dao.CredentialsEntity, error)) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	_c.Call.Return(run)
	return _c
}
