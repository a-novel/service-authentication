// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pkgmocks

import (
	"context"

	models0 "github.com/a-novel/service-authentication/models"
	"github.com/a-novel/service-json-keys/models"
	"github.com/a-novel/service-json-keys/pkg"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthenticateSource creates a new instance of MockAuthenticateSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticateSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticateSource {
	mock := &MockAuthenticateSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticateSource is an autogenerated mock type for the AuthenticateSource type
type MockAuthenticateSource struct {
	mock.Mock
}

type MockAuthenticateSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticateSource) EXPECT() *MockAuthenticateSource_Expecter {
	return &MockAuthenticateSource_Expecter{mock: &_m.Mock}
}

// VerifyClaims provides a mock function for the type MockAuthenticateSource
func (_mock *MockAuthenticateSource) VerifyClaims(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions) (*models0.AccessTokenClaims, error) {
	ret := _mock.Called(ctx, usage, accessToken, options)

	if len(ret) == 0 {
		panic("no return value specified for VerifyClaims")
	}

	var r0 *models0.AccessTokenClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) (*models0.AccessTokenClaims, error)); ok {
		return returnFunc(ctx, usage, accessToken, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) *models0.AccessTokenClaims); ok {
		r0 = returnFunc(ctx, usage, accessToken, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models0.AccessTokenClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage, string, *pkg.VerifyClaimsOptions) error); ok {
		r1 = returnFunc(ctx, usage, accessToken, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticateSource_VerifyClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyClaims'
type MockAuthenticateSource_VerifyClaims_Call struct {
	*mock.Call
}

// VerifyClaims is a helper method to define mock.On call
//   - ctx
//   - usage
//   - accessToken
//   - options
func (_e *MockAuthenticateSource_Expecter) VerifyClaims(ctx interface{}, usage interface{}, accessToken interface{}, options interface{}) *MockAuthenticateSource_VerifyClaims_Call {
	return &MockAuthenticateSource_VerifyClaims_Call{Call: _e.mock.On("VerifyClaims", ctx, usage, accessToken, options)}
}

func (_c *MockAuthenticateSource_VerifyClaims_Call) Run(run func(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions)) *MockAuthenticateSource_VerifyClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.KeyUsage), args[2].(string), args[3].(*pkg.VerifyClaimsOptions))
	})
	return _c
}

func (_c *MockAuthenticateSource_VerifyClaims_Call) Return(accessTokenClaims *models0.AccessTokenClaims, err error) *MockAuthenticateSource_VerifyClaims_Call {
	_c.Call.Return(accessTokenClaims, err)
	return _c
}

func (_c *MockAuthenticateSource_VerifyClaims_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage, accessToken string, options *pkg.VerifyClaimsOptions) (*models0.AccessTokenClaims, error)) *MockAuthenticateSource_VerifyClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockToken creates a new instance of MockToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockToken {
	mock := &MockToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockToken is an autogenerated mock type for the Token type
type MockToken struct {
	mock.Mock
}

type MockToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockToken) EXPECT() *MockToken_Expecter {
	return &MockToken_Expecter{mock: &_m.Mock}
}

// GetRoles provides a mock function for the type MockToken
func (_mock *MockToken) GetRoles() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockToken_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type MockToken_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetRoles() *MockToken_GetRoles_Call {
	return &MockToken_GetRoles_Call{Call: _e.mock.On("GetRoles")}
}

func (_c *MockToken_GetRoles_Call) Run(run func()) *MockToken_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetRoles_Call) Return(strings []string) *MockToken_GetRoles_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockToken_GetRoles_Call) RunAndReturn(run func() []string) *MockToken_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function for the type MockToken
func (_mock *MockToken) GetToken() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockToken_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockToken_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetToken() *MockToken_GetToken_Call {
	return &MockToken_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *MockToken_GetToken_Call) Run(run func()) *MockToken_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetToken_Call) Return(s string) *MockToken_GetToken_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockToken_GetToken_Call) RunAndReturn(run func() string) *MockToken_GetToken_Call {
	_c.Call.Return(run)
	return _c
}
